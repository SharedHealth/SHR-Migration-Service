group 'shr-migration-service'

apply plugin: 'java'
apply plugin: 'rpm'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'pmd'

def mainClassName = "org.sharedhealth.migrationService.launch.Main"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    flatDir {
        dirs "${rootDir}/lib"
    }
}

jar {
    baseName = 'shr-migration-service'
    manifest {
        attributes('Main-Class': mainClassName)
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

ext.libraries = [
        apache_log4j_core           : "org.apache.logging.log4j:log4j-core:2.6.2",
]

ext.testLibraries = [
        junit                       : "junit:junit:4.12",
        mockito                     : "org.mockito:mockito-all:1.10.19",
]

dependencies {
    compile libraries.values()
    testCompile testLibraries.values()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

checkstyle {
    configFile rootProject.file('config/checkstyle/checkstyle.xml')
}

pmd {
    toolVersion = '5.0.5'
    ruleSetFiles = files("${project.projectDir}/config/pmd/rulesets.xml")
}

def exportEnvironmentVariablesToXML(defaults) {
    defaults.remove(defaults.envs)
    Properties environmentVariables = new Properties();
    environmentVariables.load(new FileInputStream(new File('env/local.properties')))
    defaults.append new NodeBuilder().envs() {
        environmentVariables.each { prop, value ->
            env(name: prop, value: value)
        }
    }
}

def localEnv = new Properties();
localEnv.load(new FileInputStream(new File('src/test/resources/test.properties')))

private Properties loadConfig() {
    Properties properties = new Properties()
    properties.load(new FileInputStream(new File('env/local.properties')));
    properties
}

task assembly(dependsOn: 'build') << {
    new File("${buildDir}/etc/").mkdir();
}


task exportProperties(dependsOn: 'assembly') << {
    PrintStream output = new PrintStream(new FileOutputStream(file("${buildDir}/etc/shr-migration-service")));
    Properties properties = loadConfig()
    properties.each { prop, val ->
        output.println("export " + prop + "=" + val)
    }
}

task dist(dependsOn: 'exportProperties', type: Rpm) {
    packageName = 'shr-migration-service'
    version = '1.0'
    release = project.hasProperty('release') ? project.release : '1'
    arch = NOARCH
    os = LINUX

    into '/opt/shr-migration-service'

    postInstall = file('scripts/utils/postInstall.sh')
    preUninstall = file('scripts/utils/preUninstall.sh')
    postUninstall = file('scripts/utils/postUninstall.sh')

    from("${buildDir}/etc") {
        fileMode = 0755
        into 'etc'
    }

    from("scripts/rpm") {
        fileMode = 0755
        exclude 'placeholder'
        into 'bin'
    }

    from("${buildDir}/libs") {
        fileMode = 0755
        into 'lib'
    }

    from("scripts/rpm") {
        fileMode = 0755
        exclude 'shr-migration-service'
        exclude 'start.sh'
        into 'var'
    }
}

test {
    environment localEnv
}

task runSHRMigration(type: JavaExec) {
    Properties properties = new Properties();
    properties.load(new FileInputStream(new File('env/local.properties')))
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    environment properties
}

task debugSHRMigration(type: JavaExec) {
    Properties properties = new Properties();
    properties.load(new FileInputStream(new File('env/local.properties')))
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    environment properties
    debug = true
}

idea {
    workspace {
        iws.withXml { xmlFile ->
            def runManager = xmlFile.asNode().component.find { it.@name == 'RunManager' }
            def junitDefaults = runManager.configuration.find { it.@default == 'true' && it.@type == 'JUnit' }
            junitDefaults.remove(junitDefaults.envs)
            junitDefaults.append new NodeBuilder().envs() {
                env(name: 'PATH_TO_CONFIG', value: "\$PROJECT_DIR\$/env/local.properties")
            }
            /*Configuring application runtime parameters*/
            exportEnvironmentVariablesToXML(runManager.configuration.find {
                it.@default == 'true' && it.@type == 'Application'
            });
        }
    }
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
    }
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath(
                'com.netflix.nebula:gradle-ospackage-plugin:2.+'
        )
    }
}